#
# Build Deploy file for Docker container
# Change the variables in this section to match your project
#

#
# Required GitHub secrets and variables to be set up
# Organization Secrets:
#   - NUGET_USERNAME
#   - NUGET_TOKEN
#   - DATABASE_SERVER
# Environment Secrets:
#   - DATABASE_PORT
#   - DATABASE_PASSWORD
# Repository Variables:
#   - PROJECT_NAME
#   - DATABASE_USERNAME
# Environment Variables:
#   - DATABASE_NAME
#   - EXTERNAL_PORT

name: Internal - Platform Server - Deploy Step

defaults:
  run:
    working-directory: .

#
# Everything below this is template code
#

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      source_folder:
        required: false
        default: .
        type: string
      docker_file:
        required: false
        default: Dockerfile
        type: string

jobs:
  deploy:

    # Timeout for the job
    timeout-minutes: 15

    # Static variables used in the workflow
    env:
      TIMESTAMP: ${{ github.sha }}
      CONFIGURATION: Release
      INTERNAL_PORT: 8080
      EXTERNAL_PORT: ${{ vars.EXTERNAL_PORT }}

    # To be able to deploy on the local server
    runs-on: self-hosted

    environment: ${{ inputs.environment }}

    steps:

    - name: Convert Docker name to lowercase
      id: convert_to_lowercase
      run: |
        UPPERCASE_VAR="${{ vars.PROJECT_NAME }}"
        DOCKER_NAME="${UPPERCASE_VAR,,}" # The ,, converts to lowercase
        echo "DOCKER_NAME=$DOCKER_NAME" >> $GITHUB_OUTPUT

    - name: Checkout repository
      uses: actions/checkout@v4      

    - name: Create config file
      uses: bluwy/substitute-string-action@v3
      with:
        _input-file: ${{ inputs.source_folder }}/Config/appsettings.Production.json
        DATABASE.SERVER: ${{ secrets.DATABASE_SERVER }}
        DATABASE.PORT: ${{ secrets.DATABASE_PORT }}
        DATABASE.USERNAME: ${{ vars.DATABASE_USERNAME }}
        DATABASE.PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE.NAME: ${{ vars.DATABASE_NAME }}
        _output-file: ${{ inputs.source_folder }}/Config/appsettings.Production.json

    # Build the image
    - name: Build Docker image
      run: docker build . --file ${{ inputs.docker_file }} --tag ${{ steps.convert_to_lowercase.outputs.DOCKER_NAME }}-${{ inputs.environment }}-image:${{ env.TIMESTAMP }}  --build-arg username=${{ secrets.NUGET_USERNAME }} --build-arg token=${{ secrets.NUGET_TOKEN }}

    - name: Stop old Docker container
      run: docker stop ${{ steps.convert_to_lowercase.outputs.DOCKER_NAME }}-${{ inputs.environment }} || true

    - name: Delete old Docker container
      run:
        docker rm ${{ steps.convert_to_lowercase.outputs.DOCKER_NAME }}-${{ inputs.environment }} || true

    - name: Run Docker container
      run:
        docker run -d -p ${{ env.EXTERNAL_PORT }}:${{ env.INTERNAL_PORT }} --name ${{ steps.convert_to_lowercase.outputs.DOCKER_NAME }}-${{ inputs.environment }} ${{ steps.convert_to_lowercase.outputs.DOCKER_NAME }}-${{ inputs.environment }}-image:${{ env.TIMESTAMP }}

